# 

## How does it work?

Whitespace uses three whitespace characters from the ASCII encoding:

- `0x20` — `SPC`
- `0x0a` — `LF`
- `0x09` — `TAB`
- *Everything else* is a comment.


## How does it work?

Execution works by applying instructions to a Stack Machine

- Stack: `Push Duplicate Swap Drop Copy Slide`
- Heap: `Store Fetch`
- Arithmetic: `+` ` ` `-` ` ` `×` ` ` `÷` ` ` `Modulo`
- FlowControl: `Tag Call Jump JumpIfZero JumpIfNegative Return Exit`
- InputOutput: `ReadCharacter ReadNumber WriteCharacter WriteNumber`


## How does it work?

\vspace{-0.6cm}
`<IMP> <Operation> [Parameter]`:

- Most take no parameter, e.g. $\:$ `Swap Duplicate ÷ Modulo`
- Some FlowControl ops take *Label* parameters, e.g. $\:$ `Tag Call Jump`
- Some Stack ops take *Integer* parameters, e.g. $\:$ `Push Copy Slide`


## How does it work?

[simg:h=3.0cm|graphics/op-arith-div.pdf]


## How does it work?

\vspace{-1cm}
Labels for FlowControl operations:

- Spaces and Tabs of arbitrary length, terminated by a linefeed.
- The spec assigns no special meaning to these strings.
- There is just one name space, and labels have to be unique.
- So you can't use the same label in two `Tag` calls.

[simg:h=1.2cm:(3.2cm,1.3cm)|graphics/labels-simple.pdf]


## How does it work?

\vspace{-1cm}
There is one type of data in Whitespace:

- Signed Integers…
- …of arbitrary size.
- Literals in program text use signed-magnitude binary encoding.
- Used for: Data (Numbers and Characters), Addresses (Stack and Heap), etc.

[simg:h=2.5cm:(4cm,0.5cm)|graphics/numbers.pdf]


# …and that is all there is to it, really…


## How about implementing it?

[simg:h=4.0cm|graphics/implementation.pdf]


## How about implementing it? — VM

```.haskell
data WhitespaceMachine = WhitespaceMachine
  {
    stack     :: Stack,
    heap      :: Heap,
    pc        :: Address,
    callStack :: Stack,
    jump      :: JumpTable,         -- Maps a Label to an Address
    program   :: WhitespaceProgram  -- [WhitespaceExpression]
  }
```


## How about implementing it? — AST

[columns]

[column=0.60]

\small
```.haskell
data WhitespaceExpression =
    StackManipulation StackOperation
  | Arithmetic        ArithmeticOperation
  | HeapAccess        HeapOperation
  | FlowControl       FlowControlOperation
  | InputOutput       InputOutputOperation
```

[column=0.4]

\small
```.haskell
data StackOperation =
    Push Integer
  | Duplicate
  | Copy Integer
  | Swap
  | Drop
  | Slide Integer
```

[/columns]


## How about implementing it? — AST

```.haskell
  [ StackManipulation (Push 11),
    StackManipulation (Push 33),
    Arithmetic Add,
    InputOutput PrintNumber,
    FlowControl ExitFromProgram ]
```

…what is left to do?


## How about implementing it? — Parser

[columns]

[column=0.5]

| IMP            | Meaning            |
|----------------+--------------------|
| `[Space]`      | Stack Manipulation |
| `[LF]`         | Flow Control       |
| `[Tab][Tab]`   | Heap access        |
| `[Tab][Space]` | Arithmetic         |
| `[Tab][LF]`    | I/O                |

[column=0.5]

| Operation      | Meaning   |
|----------------|-----------|
| `[Space]`      | Push      |
| `[LF][Space]`  | Duplicate |
| `[LF][Tab]`    | Swap      |
| `[LF][LF]`     | Discard   |
| `[Tab][Space]` | Copy      |
| `[Tab][LF]`    | Slide     |

[/columns]


## How about implementing it? — Parser

```.haskell
stackParser :: Parser StackOperation
stackParser = do
  (      try $ imp [ space ])
  (      try $ Push  <$> number [ space ])
    <|> (try $ operation        [ linefeed, space    ] Duplicate)
    <|> (try $ operation        [ linefeed, tabular  ] Swap)
    <|> (try $ operation        [ linefeed, linefeed ] Drop)
    <|> (try $ Copy  <$> number [ tabular,  space    ])
    <|> (try $ Slide <$> number [ tabular,  linefeed ])
```


## How about implementing it? — Eval

```.haskell
module SpaceMan.Machine.Tools (
  psh, drp, peek, ref, -- Stack Memory Instructions
  sto, lda,            -- Heap Memory Instructions
  csp, csd, csa,       -- Call Stack Instructions
  pci, pcl, pcn, ldi,  -- Process Counter Instructions
  lbl)                 -- Jump Table Instructions
where
```


## How about implementing it? — Eval

\small
```.haskell
eval :: WhitespaceMachine -> StackOperation -> IO WhitespaceMachine
eval m (Push n)  = return $ pci $ psh [n] m
eval m Duplicate = return $ pci $ psh h m              where h     = peek 1 m
eval m Swap      = return $ pci $ psh [b,a] $ drp 2 m  where [a,b] = peek 2 m
eval m Drop      = return $ pci $ drp 1 m
eval m (Copy i)  = return $ pci $ psh [n] m            where n = ref  i m
eval m (Slide n) = return $ pci $ psh h $ drp (n+1) m  where h = peek 1 m
```


## How about implementing it? — Eval

\Large
```.haskell
eval m (Push n) = return $ pci $ psh [n] m
```


## How about implementing it? — Eval

\small
```.haskell
eval :: WhitespaceMachine -> StackOperation -> IO WhitespaceMachine
eval m (Push n)  = return $ pci $ psh [n] m
eval m Duplicate = return $ pci $ psh h m              where h     = peek 1 m
eval m Swap      = return $ pci $ psh [b,a] $ drp 2 m  where [a,b] = peek 2 m
eval m Drop      = return $ pci $ drp 1 m
eval m (Copy i)  = return $ pci $ psh [n] m            where n = ref  i m
eval m (Slide n) = return $ pci $ psh h $ drp (n+1) m  where h = peek 1 m
```


# — Demo Time! —


## That's all folks!

That was…

- what Whitespace *is*.
- what it can *do*.
- what its values *look* like.
- how to *design* a virtual machine for it.
- how its program's intermediate representation can be *expressed*.
- how to *parse* program text into that representation.
- how the virtual machine can *run* that representation.
- seeing it *work*.


## Interested?

SpaceMan Implementation can be found here:

- http://github.com/ft/spaceman
- http://gitlab.com/ft/spaceman
- http://bewatermyfriend.org/p/2020/000/


# — Fin —

# — Extra Slides —

## Features

Why Whitespace!?

- Turing complete.
- Large eco-system with thousands upon thousands of modules.
- Your code looks actually *clean*.


## Features

Why Whitespace!?

- Turing complete.
- ~~Large eco-system with thousands upon thousands of modules~~.
- Your code looks actually *clean*.


## Features

Why Whitespace!?

- Turing complete — well, probably.
- ~~Large eco-system with thousands upon thousands of modules~~.
- Your code looks actually *clean*.


## How does it work?

Virtual Machine Design:

- Stack memory — Main argument memory for most instructions
- Heap memory — Utility memory
- Program memory — The actual code to run
- Program Counter — The index into program memory
- Jump Table — For all the `Jump` and `Call` instructions
- Call Stack — Because there are the `Call` and `Return` instruction


## How about implementing it? — Parser

```.haskell
whitespaceParser :: Parser WhitespaceExpression
whitespaceParser =
  (    StackManipulation  <$> stackParser)
  <|> (Arithmetic         <$> arithmeticParser)
  <|> (HeapAccess         <$> heapParser)
  <|> (FlowControl        <$> flowControlParser)
  <|> (InputOutput        <$> ioParser)
```


## How about implementing it?

\small
```.haskell
jmp :: WhitespaceMachine -> Label -> Predicate -> IO WhitespaceMachine
jmp m tag p = return $ pcl n $ drp 1 m
  where a = lbl tag m
        [v] = peek 1 m
        n = if (p v) then a else pcn m

eval :: WhitespaceMachine -> FlowControlOperation -> IO WhitespaceMachine
eval m (Tag _)              = return $ pci m
eval m (Call tag)           = return $ pcl a $ csp m where a = lbl tag m
eval m (Jump tag)           = return $ pcl a m       where a = lbl tag m
eval m (JumpIfZero tag)     = jmp m tag (== 0)
eval m (JumpIfNegative tag) = jmp m tag (<  0)
eval m Return               = return $ pcl a $ csd m where a = 1+(csa m)
eval _ ExitFromProgram      = exitSuccess
```
